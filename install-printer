#!/usr/bin/env python
import argparse
import os
import sys
import subprocess
import urllib2
from getpass import getpass
import logging
# Uncomment the following to enable debug informations
# logging.basicConfig(level = logging.DEBUG)

parser = argparse.ArgumentParser(description='Setup Chalmers printers with cups.')
parser.add_argument('printer_name', metavar='NAME', type=str, 
                    help='the name which is written on the printer')
parser.add_argument('-a','--alias', dest='alias',
                    help='an alias to help identify the printer \
                        (defaults to the printer name)')
parser.add_argument('-d','--description', dest='description',
                    help='printer description')
parser.add_argument('-l','--location', dest='location',
                    help='printer location')
parser.add_argument('-c','--cid', dest='cid',
                    help='your Chalmers ID')
parser.add_argument('-p','--password', dest='password',
                    help='your Chalmers password')
def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":True,   "y":True,  "ye":True,
             "no":False,     "n":False}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")

FNULL = open(os.devnull, 'w')
def printer_exists(name):
  c = subprocess.call(["lpstat","-v",name],
        stdout=FNULL, stderr=subprocess.STDOUT)
  if c == 0:
    logging.debug("Printer %s exists (lpstat status %d)" % (name,c))
  else:
    logging.debug("Printer %s does not exists (lpstat status %d)" % (name,c))
  return c == 0

def remove_printer(name):
  subprocess.call(["lpadmin","-x",name])

def add_printer(cid, password, name, alias, description, location):
  alias = alias or name
  driver_url = "https://print.chalmers.se/drivers/%s.ppd" % name
  ppd_file = "/etc/cups/ppd/%s.ppd" % name
  with open( ppd_file, 'w' ) as dst:
    src = urllib2.urlopen(driver_url)
    dst.write(src.read())
    src.close()
  cmd  = ["lpadmin"]
  cmd += [ "-p", alias ]
  cmd += [ "-v", "smb://NET%%5C%s:%s@print.chalmers.se/%s" % (cid, password, name)]
  if location:
    cmd += [ "-L", location ]
  if description:
    cmd += [ "-D", description ]
  cmd += [ "-P", ppd_file ]
  cmd += [ "-E" ]
  logging.debug("Running command %s" % cmd)
  subprocess.call(cmd)

def getcid():
  sys.stdout.write("CID? ")
  return raw_input()

if __name__ == "__main__":
  if os.geteuid() != 0:
    exit("You need to have root privileges to run this script.")
  args = parser.parse_args()
  alias = args.alias or args.printer_name
  if printer_exists(alias):
    if query_yes_no("Printer %s already exists, replace?" % alias):
      remove_printer(alias)
    else:
      exit()
  
  cid = args.cid or getcid()
  password = args.password or getpass("Password? ")
  add_printer(cid, password,
      args.printer_name, alias, args.description, args.location)
